Imports System.Math
Imports System.IO
Imports Scripting

Module Module2

    Public q As Double '= 0.1  'representa abrangencia das formigas, qto + proximo 1, maior abrangencia na busca das formigas

    Public Chi As Double '= 0.9999 'representa a taxa de evaporacao de feromonio ACO padrao

    Public condicaoDeParada As Integer '= 100


    ' Matriz T com K soluções aleatórias ======================= '
    'matrizT(k,7) => 7 colunas para as 6 variáveis e o valor da FO.
    '| 0  |  1  |  2  |  3  |  4  |  5  |  6    | 7    |
    '| SH | CM  | KFT | TFT | CTU | SM  | Vcmc  | KpMc |

    'dimensão menos 1
    Public K As Integer '= 500 - 1 'representa o número de soluções aleatórias
    Public m As Integer '= 20 - 1     '=> a set of m solutions is generated by the ants and added to those in matrizT

    '  Public matrizT(K, 8)
    Public vetorW(K)             'Vetor que armazena os pesos de cada solução da tabela / estrutura
    Public vetorProbabilidade(K)   'vetor para armazenar o calculo das probabilidades
    Public quantidadeIteracoes As Integer  'quantidade de iteracoes do algoritmo

    '====================================================================================



    Public Function calculaPesoW(ByVal L As Integer) As Double
        Dim WL As Double

        'L 'indice da tabela

        Dim aux, aux1, auxE As Double
        Dim auxK As Double
        auxK = K + 1

        L = L + 1

        aux = 1 / (q * auxK * Math.Sqrt(2 * Math.PI))
        aux1 = ((L - 1) ^ 2) / (2 * (q ^ 2) * (auxK ^ 2))
        auxE = Math.E ^ (-aux1)

        WL = aux * auxE

        Return WL
    End Function

    Public Function calculaProbabilidade(ByVal pesoWl As Double, ByVal totalPesos As Double) As Double

        Return (pesoWl / totalPesos)

    End Function

    Public Function roleta(ByRef limite As Double) As Integer

        Dim aux As Double
        Dim i As Integer

        For i = 0 To K
            If aux <= limite Then
                aux = aux + stAtual(i).probabilidade
            Else
                Return i
            End If
        Next i

        If i > K Then
            i = K
        End If

        Return i

    End Function

    Public Function somatorioPesos() As Double
        Dim soma As Double = 0

        For i = 0 To K
            soma = soma + stAtual(i).pesoW
        Next

        Return soma

    End Function

    Public Sub iniciaSolucaoT()

        Dim i As Integer

        Dim horaInicial, horaFinal As DateTime
        Dim diferenca As TimeSpan
        horaInicial = Date.Now



        ' Dim f As Double
        'para trabalhar com arquivos, criar etc..
        Dim fso As New FileSystemObject
        Dim arquivoTexto As TextStream
        'Dim texto As String
        Dim nomeArquivo As String
        'Dim nomeArquivo1 As String
        'Dim nomeArquivo2 As String
        'Dim nomeArquivo3 As String

        'nomeArquivo = "primeiraTabelaGerada.txt"

        ''nomeArquivo1 = "auxiliar.txt"
        'Dim arquivoAuxiliar As TextStream
        '' nomeArquivo2 = "formigas.txt"
        'Dim arquivoFormiagas As TextStream
        '' nomeArquivo3 = "statual.txt"
        'Dim arquivoStAtual As TextStream

        'arquivoAuxiliar = fso.CreateTextFile(nomeArquivo1, True)
        'arquivoFormiagas = fso.CreateTextFile(nomeArquivo2, True)
        'arquivoStAtual = fso.CreateTextFile(nomeArquivo3, True)


        'arquivoTexto = fso.CreateTextFile(nomeArquivo, True)

        'arquivoTexto.WriteLine("Primeira tabela com " & K + 1 & " solucoes")
        'arquivoTexto.WriteBlankLines(2)


        'gera os valores aleatórios para cada parâmetro da Minimo Custo
        'primeira tabela 
        For i = 0 To K
            'gera os valores para SH

            stAtual(i).Sh = aleatorio((stInicial.Sh * (1 - stPercParametros.Sh / 100)), (stInicial.Sh * (1 + stPercParametros.Sh / 100)))  'matrizT(i, 0)
            ' arquivoTexto.Write(stAtual(i).Sh & " ; ")
            'gera os valores para CM
            stAtual(i).Cm = aleatorio((stInicial.Cm * (1 - stPercParametros.Cm / 100)), (stInicial.Cm * (1 + stPercParametros.Cm / 100)))  'matrizT(i, 1)
            '  arquivoTexto.Write(stAtual(i).Cm & " ; ")
            'gera os valores para KFT

            stAtual(i).Kft = aleatorio((stInicial.Kft * (1 - stPercParametros.Kft / 100)), (stInicial.Kft * (1 + stPercParametros.Kft / 100)))  'matrizT(i, 2)
            '  arquivoTexto.Write(stAtual(i).Kft & " ; ")
            'gera os valores para TFT


            stAtual(i).Tft = aleatorio((stInicial.Tft * (1 - stPercParametros.Tft / 100)), (stInicial.Tft * (1 + stPercParametros.Tft / 100)))  'matrizT(i, 3)
            '  arquivoTexto.Write(stAtual(i).Tft & " ; ")
            'gera os valores para CTU

            stAtual(i).Ctu = aleatorio((stInicial.Ctu * (1 - stPercParametros.Ctu / 100)), (stInicial.Ctu * (1 + stPercParametros.Ctu / 100))) 'matrizT(i, 4)
            '  arquivoTexto.Write(stAtual(i).Ctu & " ; ")
            'gera os valores para SM

            stAtual(i).Sm = aleatorio((stInicial.Sm * (1 - stPercParametros.Sm / 100)), (stInicial.Sm * (1 + stPercParametros.Sm / 100)))  'matrizT(i, 5)
            '  arquivoTexto.Write(stAtual(i).Sm & " ; ")
            'calcula as VC

            stAtual(i).Vcmc = calculaVcmc(stFixo.k, stAtual(i).Sh, stAtual(i).Sm, stFixo.x, stAtual(i).Kft, stAtual(i).Tft) 'matrizT(i, 6)

            stAtual(i).VcmcLim = calculaVcmcLim(stFixo.k, stAtual(i).Sh, stAtual(i).Sm, stFixo.x, stAtual(i).Kft)

            stAtual(i).VcmXp = calculaVcmXp(stFixo.k, stFixo.x, stAtual(i).Tft)


            'calcula a FO para cada linha
            stAtual(i).KpVcmc = calculaCustoTotalKp(stAtual(i).Sh, stAtual(i).Cm, stAtual(i).Kft, stAtual(i).Tft, stAtual(i).Ctu, stAtual(i).Sm, stAtual(i).Vcmc)  'matrizT(i, 7)
            ' arquivoTexto.Write(stAtual(i).KpVcmc)
            ' arquivoTexto.WriteBlankLines(1)
        Next i

        'arquivoTexto.Close()


        'calcula o total dos pesos
        Dim totalPesos As Double


        'chamar formigas para escolher uma solução probabilisticamente.
        'vejo se a probabilidade for < então aceito para a formiga
        'for para as formigas

        'Dim limite As Double = aleatorio(0, somatorioPesos())  'valor do sorteio
        Dim indiceSolucaoEscolhida As Integer
        ' Dim formiga(m) As Estado
        Dim auxiliar(K + m + 1) As Estado

        Dim escolhaSolucaoProbabilidade As Double

        nomeArquivo = "melhorsolucao.txt"


        arquivoTexto = fso.CreateTextFile(nomeArquivo, True)
        ' arquivoTexto.WriteLine("Numero de iteracoes " & condicaoDeParada)
        ' arquivoTexto.WriteBlankLines(2)

        quantidadeIteracoes = 1

        While quantidadeIteracoes < condicaoDeParada
            'ordena a estrutura 
            ordenacaoBubbleSortKpVcmc(stAtual)

            '  arquivoTexto.WriteBlankLines(2)

            ' arquivoTexto.WriteLine("Melhor solucao ordenada")
            ' arquivoTexto.WriteLine("Kp = " & stAtual(0).KpVcmc)
            ' arquivoTexto.WriteLine(stAtual(0).KpVcmc)


            'arquivoTexto.WriteLine("Sh = " & stAtual(0).Sh)
            'arquivoTexto.WriteLine("Cm = " & stAtual(0).Cm)
            'arquivoTexto.WriteLine("Ctu = " & stAtual(0).Ctu)
            'arquivoTexto.WriteLine("Kft = " & stAtual(0).Kft)
            'arquivoTexto.WriteLine("Tft = " & stAtual(0).Tft)
            'arquivoTexto.WriteLine("Sm = " & stAtual(0).Sm)

            ' arquivoTexto.WriteBlankLines(1)

            'calcula o peso 
            For i = 0 To K

                stAtual(i).pesoW = calculaPesoW(i)
                ' arquivoTexto.WriteLine("Peso " & stAtual(i).pesoW & " - " & i)
            Next i
            ' arquivoTexto.WriteBlankLines(1)
            totalPesos = somatorioPesos()
            'arquivoTexto.WriteLine("Total dos pesos - " & totalPesos)
            'arquivoTexto.WriteBlankLines(1)
            'arquivoTexto.WriteLine("Probabilidade========")
            'calcular a probabilidade

            For i = 0 To K

                stAtual(i).probabilidade = calculaProbabilidade(stAtual(i).pesoW, totalPesos)
                ' arquivoTexto.WriteLine("Probabilidade - " & stAtual(i).probabilidade & " - " & i)
            Next

            'arquivoTexto.WriteBlankLines(1)
            'chamar formigas para escolher uma solução probabilisticamente.
            'vejo se a probabilidade for < então aceito para a formiga
            'for para as formigas

            ' Dim auxFormigaDesvioPadrao As Estado  'contem o desvio padrao de todos os campos
            'arquivoTexto.WriteLine("Formigas = " & m + 1)
            'arquivoTexto.WriteBlankLines(1)

            For i = 0 To m   'numero de formigas
                '   arquivoTexto.WriteLine("Formiga = " & i)
                'escolhe uma solucao aleatoria
                escolhaSolucaoProbabilidade = aleatorio_01()

                ' arquivoTexto.WriteLine("Formigas escolha Solucao Probabilidade = " & escolhaSolucaoProbabilidade)
                indiceSolucaoEscolhida = roleta(escolhaSolucaoProbabilidade)
                'arquivoTexto.WriteLine("Formigas indice Solucao Escolhida = " & indiceSolucaoEscolhida)
                'arquivoTexto.WriteLine("Nova solucao = ")
                'arquivoTexto.WriteBlankLines(1)

                formiga(i).Sh = Gaussian(stAtual(indiceSolucaoEscolhida).Sh, stAtual(indiceSolucaoEscolhida).pesoW, "Sh", indiceSolucaoEscolhida)

                If formiga(i).Sh < stMinimoPermitodo.Sh Then
                    formiga(i).Sh = stMinimoPermitodo.Sh
                End If

                ' arquivoTexto.WriteLine("formiga(" & i & ").Sh = " & formiga(i).Sh)

                formiga(i).Cm = Gaussian(stAtual(indiceSolucaoEscolhida).Cm, stAtual(indiceSolucaoEscolhida).pesoW, "Cm", indiceSolucaoEscolhida)

                If formiga(i).Cm < stMinimoPermitodo.Cm Then
                    formiga(i).Cm = stMinimoPermitodo.Cm
                End If


                '  arquivoTexto.WriteLine("formiga(" & i & ").Cm = " & formiga(i).Cm)

                formiga(i).Ctu = Gaussian(stAtual(indiceSolucaoEscolhida).Ctu, stAtual(indiceSolucaoEscolhida).pesoW, "Ctu", indiceSolucaoEscolhida)

                If formiga(i).Ctu < stMinimoPermitodo.Ctu Then
                    formiga(i).Ctu = stMinimoPermitodo.Ctu
                End If

                '   arquivoTexto.WriteLine("formiga(" & i & ").Ctu = " & formiga(i).Ctu)

                formiga(i).Kft = Gaussian(stAtual(indiceSolucaoEscolhida).Kft, stAtual(indiceSolucaoEscolhida).pesoW, "Kft", indiceSolucaoEscolhida)

                If formiga(i).Kft < stMinimoPermitodo.Kft Then
                    formiga(i).Kft = stMinimoPermitodo.Kft
                End If

                '   arquivoTexto.WriteLine("formiga(" & i & ").Kft = " & formiga(i).Kft)

                formiga(i).Sm = Gaussian(stAtual(indiceSolucaoEscolhida).Sm, stAtual(indiceSolucaoEscolhida).pesoW, "Sm", indiceSolucaoEscolhida)

                If formiga(i).Sm < stMinimoPermitodo.Sm Then
                    formiga(i).Sm = stMinimoPermitodo.Sm
                End If

                '   arquivoTexto.WriteLine("formiga(" & i & ").Sm = " & formiga(i).Sm)

                formiga(i).Tft = Gaussian(stAtual(indiceSolucaoEscolhida).Tft, stAtual(indiceSolucaoEscolhida).pesoW, "Tft", indiceSolucaoEscolhida)

                If formiga(i).Tft < stMinimoPermitodo.Tft Then
                    formiga(i).Tft = stMinimoPermitodo.Tft
                End If

                '   arquivoTexto.WriteLine("formiga(" & i & ").Tft = " & formiga(i).Tft)


                '03/07
                formiga(i).Vcmc = calculaVcmc(stFixo.k, formiga(i).Sh, formiga(i).Sm, stFixo.x, formiga(i).Kft, formiga(i).Tft)

                formiga(i).VcmcLim = calculaVcmcLim(stFixo.k, formiga(i).Sh, formiga(i).Sm, stFixo.x, formiga(i).Kft)

                stAtual(i).VcmXp = calculaVcmXp(stFixo.k, stFixo.x, formiga(i).Tft)


                'calcula a FO para cada linha
                formiga(i).KpVcmc = calculaCustoTotalKp(formiga(i).Sh, formiga(i).Cm, formiga(i).Kft, formiga(i).Tft, formiga(i).Ctu, formiga(i).Sm, formiga(i).Vcmc)
                '  arquivoTexto.WriteLine("formiga(" & i & ").KpVcmc = " & formiga(i).KpVcmc)

            Next i

            ordenacaoBubbleSorEstrutura(formiga)

            For i = 0 To K
                auxiliar(i) = stAtual(i)

                '   arquivoStAtual.WriteLine(stAtual(i).KpVcmc)
            Next
            ' arquivoStAtual.WriteBlankLines(2)
            '03/07 +1
            For i = 0 To m
                auxiliar(K + i + 1) = formiga(i)

                '    arquivoFormiagas.WriteLine(formiga(i).KpVcmc)

            Next
            '  arquivoFormiagas.WriteBlankLines(2)

            ordenacaoBubbleSorEstrutura(auxiliar)

            'For i = 0 To auxiliar.Length - 1
            '    arquivoAuxiliar.WriteLine(auxiliar(i).KpVcmc)
            'Next
            ' arquivoAuxiliar.WriteBlankLines(2)

            '  MessageBox.Show("statual lenght" & stAtual.Length & vbCrLf & "formiga lenght" & formiga.Length & vbCrLf & "auxiliar lenght" & auxiliar.Length)




            For i = 0 To K
                stAtual(i) = auxiliar(i)
            Next

            quantidadeIteracoes += 1
        End While


        'arquivoAuxiliar.Close()

        'arquivoFormiagas.Close()

        'arquivoStAtual.Close()


        'ordena a estrutura 
        ordenacaoBubbleSortKpVcmc(stAtual)

        stMelhor = stAtual(0)
        ' arquivoTexto.WriteBlankLines(1)
        arquivoTexto.WriteLine("Final: " & stAtual(0).KpVcmc)
        ' arquivoTexto.WriteLine(stAtual(0).KpVcmc)

        arquivoTexto.WriteBlankLines(1)
        horaFinal = Date.Now

        diferenca = horaFinal.Subtract(horaInicial)

        ' MessageBox.Show(diferenca.TotalMilliseconds.ToString("0.000000"))

        arquivoTexto.WriteLine("Tempo")

        arquivoTexto.WriteLine("Inicio = " & horaInicial & " Final = " & horaFinal)
        Dim variacao As Double
        variacao = frmPrincipal.calcularVariacao(stMelhor.KpVcmc, stInicial.KpVcmc, Color.Black)

        arquivoTexto.WriteLine("Inicio = " & horaInicial.Millisecond & " Final = " & horaFinal.Millisecond & " Tempo = " & diferenca.ToString & " Variacao = " & variacao)

        arquivoTexto.WriteBlankLines(1)
        arquivoTexto.WriteLine("Parametros do ACOr")
        arquivoTexto.WriteLine("q = " & q)
        arquivoTexto.WriteLine("chi = " & Chi)
        arquivoTexto.WriteLine("criterio parada = " & condicaoDeParada)
        arquivoTexto.WriteLine("K = " & K + 1)
        arquivoTexto.WriteLine("No. formigas = " & m + 1)

       

        arquivoTexto.Close()


    End Sub

    Public Function ordenacaoBubbleSortKpVcmc(ByRef estrutura() As Estado)
        Dim stAux As Estado
        Dim j As Integer

        For i = 0 To K
            For j = 0 To K - (i + 1)
                If estrutura(j).KpVcmc > estrutura(j + 1).KpVcmc Then
                    stAux = estrutura(j)
                    estrutura(j) = estrutura(j + 1)
                    estrutura(j + 1) = stAux

                End If
            Next j
        Next i

        Return estrutura

    End Function
    Public Function ordenacaoBubbleSorEstrutura(ByRef estrutura() As Estado)
        Dim stAux As Estado
        Dim j As Integer
        Dim Kaux As Integer
        Kaux = estrutura.Length - 1
        For i = 0 To Kaux
            For j = 0 To Kaux - (i + 1)
                If estrutura(j).KpVcmc > estrutura(j + 1).KpVcmc Then
                    stAux = estrutura(j)
                    estrutura(j) = estrutura(j + 1)
                    estrutura(j + 1) = stAux

                End If
            Next j
        Next i

        Return estrutura

    End Function


    Public Function calculaDesvioPadrao(ByVal valorVariavel As Double, ByVal nomeVariavel As String) As Double

        Dim somatorioVariavel As Double = 0

        Select Case nomeVariavel

            Case "Sh"
                For i As Integer = 0 To K

                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Sh - valorVariavel) / (K + 1))
                Next i

            Case "Cm"
                For i As Integer = 0 To K
                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Cm - valorVariavel) / (K + 1))
                Next i
            Case "Kft"
                For i As Integer = 0 To K

                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Kft - valorVariavel) / (K + 1))
                Next i
            Case "Tft"
                For i As Integer = 0 To K

                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Tft - valorVariavel) / (K + 1))
                Next i
            Case "Ctu"
                For i As Integer = 0 To K

                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Ctu - valorVariavel) / (K + 1))
                Next i
            Case "Sm"
                For i As Integer = 0 To K

                    somatorioVariavel = somatorioVariavel + (Abs(stAtual(i).Sm - valorVariavel) / (K + 1))
                Next i
            Case Else
                MessageBox.Show("Erro no parametro media")

        End Select

        Return Chi * somatorioVariavel

    End Function


    Public Function Gaussian(ByVal x As Double, ByVal peso As Double, ByVal gaussianaNomeVariavel As String, ByVal indice As Integer) As Double
        Dim aux1, aux2 As Double

        Dim desvioPadrao As Double

        Dim media As Double

        Dim pesoSolucao As Double = stAtual(indice).pesoW

        media = somatorioTotalDaVariavel(gaussianaNomeVariavel)
        media = media / (K + 1)

        desvioPadrao = calculaDesvioPadrao(x, gaussianaNomeVariavel)

        aux1 = 1 / (desvioPadrao * Sqrt(2 * Math.PI))
        aux2 = ((x - media) ^ 2) / (2 * (desvioPadrao ^ 2))

        Gaussian = pesoSolucao * aux1 * Math.E ^ (-aux2)
        Gaussian = x - (Gaussian * desvioPadrao)

        Return Gaussian
    End Function


    Private Function somatorioTotalDaVariavel(ByVal nomeVariavel As String) As Double

        Dim soma As Double


        Select Case nomeVariavel

            Case "Sh"
                For i As Integer = 0 To K
                    soma += stAtual(i).Sh
                Next

            Case "Cm"
                For i As Integer = 0 To K
                    soma += stAtual(i).Cm
                Next

            Case "Kft"
                For i As Integer = 0 To K
                    soma += stAtual(i).Kft
                Next

            Case "Tft"
                For i As Integer = 0 To K
                    soma += stAtual(i).Tft
                Next

            Case "Ctu"
                For i As Integer = 0 To K
                    soma += stAtual(i).Ctu
                Next

            Case "Sm"
                For i As Integer = 0 To K
                    soma += stAtual(i).Sm
                Next

            Case Else
                MessageBox.Show("Erro no parametro")

        End Select

        Return soma

    End Function

    '============================================================='
    ' Funções para gerar números Randomicos no intervalo ========='

    Function aleatorio(ByVal a As Double, ByVal b As Double) As Double
        Randomize()
        'gera um numero aleatorio entre [a, b] - b tem que ser maior que a
        Dim x As Double

        'x = (((b - a + 1) * Rnd) + a)
        x = Round((((b - a + 1) * Rnd()) + a), 4)
        While x < a Or x > b
            'até ter um numero aleatorio dentro do range
            'x = (((b - a + 1) * Rnd) + a)
            x = Round((((b - a + 1) * Rnd()) + a), 4)
        End While

        aleatorio = x


    End Function


    Function aleatorio_01() As Double
        Randomize()
        'gera numero aleatorio entre 0 e 1
        'Randomize
        'aleatorio_01 = Rnd
        ' aleatorio_01 = Round(Rnd, 4)
        Return VBMath.Rnd()

    End Function

End Module
